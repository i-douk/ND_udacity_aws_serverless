org: ihssandk
app: serverless-todo-app
service: serverless-todo-app

# configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  # - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: TodosTable-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    TODOS_S3_BUCKET: todo-bucket-new-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    
    
  # apiGateway:
  #   logging:
  #     restApi: true
  
  iamRoleStatements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"
 
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo App API
        description: Todo application
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # GetTodos:
  #   handler: src/lambda/http/getTodos.handler
  #   events:
  #     - http:
  #           method: get
  #           path: todos
  #           cors: true
  #           authorizer: Auth
  #           reqValidatorName: RequestBodyValidator

  #   iamRoleStatements:
  #       - Effect: Allow
  #         Action:
  #           - dynamodb:GetItem
  #           - dynamodb:Query
  #           - dynamodb:Scan
  #         Resource: !GetAtt TodosTable.Arn

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              application/json: CreateTodoRequest

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TodosTable.Arn
 
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              "application/json": UpdateTodoRequest


    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem

        Resource: !GetAtt TodosTable.Arn


 
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
        - http:
            method: delete
            path: todos/{todoId}
            cors: true
            authorizer: Auth
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
          Resource: !GetAtt TodosTable.Arn
        - Effect: Allow
          Action:
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*"


  GenerateUploadUrl:
      handler: src/lambda/http/generateUploadUrl.handler
      events:
        - http:
            method: post
            path: todos/{todoId}/attachment
            cors: true
            authorizer: Auth
      iamRoleStatements:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !GetAtt TodosTable.Arn
          - Effect: Allow
            Action:
                 - s3:PutObject
                 - s3:GetObject
            Resource: "arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*"

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # Here "TodosTable" is the name for cross-referencing  in the serverless.yml file
    # It's not the name of the actual DynamoDB table. 
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

 

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedHeaders:
                - "*"
              AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000


    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket